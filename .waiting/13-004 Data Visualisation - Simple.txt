Data Visualisation – Simple












  











Introduction
WELCOME TO THE DATA VISUALISATION – SIMPLE TASK!
In this task, you will practice using two data visualisation libraries: Matplotlib and Seaborn.
MATPLOTLIB
Many packages in Python allow one to perform powerful data analysis. Matplotlib is “... a Python 2D plotting library which produces publication quality figures in a variety of hardcopy formats and interactive environments across platforms. Matplotlib can be used in Python scripts, the Python and IPython shells, Jupyter Notebook, web application servers, and four graphical user interface toolkits” (Hunter, 2007). With Matplotlib, we are able to draw many different graphs in Python. Explore the Matplotlib documentation to learn more.
Matplotlib is organised into a hierarchy. At the top of the hierarchy, there is a module called pyplot. We create a pyplot to create a figure. The figure keeps track of all the child axes, artists (titles, figure legends, etc.; see below), and the canvas. 
  

Graphical depiction of Matplotlib hierarchy (Hunter, 2007)
Anything you see on the figure is called an artist. This includes the Figure, Axes, and Axis objects, as well as Text objects, Line2D objects, collection objects, and Patch objects. All these artists are drawn to the canvas when the figure is shown. Most artists are tried to one Axis and cannot be shared with other Axes or moved. (Hunter, 2007)




  

Anatomy of a figure (Hunter, 2007)
All of the plotting functions expect np.array or np.ma.masked_array as input, so it is best to convert any pandas (or similar array-like data structures) to arrays before using them with Matplotlib.
Installing Matplotlib
First, let’s check if you have Matplotlib installed. Open up your terminal, input the following, and then hit enter:
pip3 show matplotlib 
	

If it is not installed you will need pip (a package manager) to install it. Use the following command to check that you have the latest version of pip:
pip3 install --upgrade pip
	Before proceeding with the installation, remember to create and activate a virtual environment to manage your project dependencies.
Then, use the following command to install Matplotlib:
python -m pip install -U matplotlib
	For further instructions on installing Matplotlib, see the official documentation.
Creating a figure
To use libraries or modules in Python, you need to import them at the beginning of your Python file. Adding as in the import statement allows you to give a shorter name to what you import, making it easier to use in your code. This alias simplifies how you refer to the imported entity. For instance:
import matplotlib.pyplot as plt
import numpy as np
	

Here, matplotlib.pyplot is imported and given the alias plt, and numpy is imported with the alias np. This makes your code more concise and readable.
NumPy is a powerful library for numerical computing in Python. It provides support for arrays, matrices, and a large collection of mathematical functions to operate on these data structures. Mastering NumPy is essential for efficient data manipulation and analysis in Python. To explore more about NumPy, you can refer to the official documentation.
Let’s create a quick dataset using NumPy and visualise it using Matplotlib. Here’s how you can do it:
# Generate 100 evenly spaced values for the x-axis
x = np.linspace(0, 100, 100)


# Calculate sine of each x value for the y-axis
y = np.sin(x)

# Plot the x and y values
plt.plot(x, y, label="sine")

# Add a title
plt.title("My first matplotlib sine graph")

# Show the plot
plt.show()
	In this example, np.linspace generates a sequence of numbers for the x-axis and np.sin calculates the sine of these numbers for the y-axis. The plot() function takes the x and y points and plots them as a line graph. If you run the program, you will get something like this:
  

Try to play around with the sine graph code provided in an example file to get a better understanding.
For more information about working with Matplotlib, please consult the fourth chapter (“Visualization with Matplotlib”) in the book, Python Data Science Handbook by Jake VanderPlas. You can also explore the Matplotlib webpage.   
	SEABORN
Seaborn is a data visualisation library that has been built on top of Matplotlib. While Matplotlib provides basic graphs, such as line and bar charts, Seaborn can provide a bit more in terms of graphing. In addition, it integrates quite well with pandas.
Some commonly used Seaborn plots include:
* histplot()
* barplot()
* boxplot()
And there are many others! You will get accustomed to many of these methods during the course of this bootcamp.
Install seaborn via your terminal using pip:
pip install -U seaborn
	

Let’s say that we are reading insurance data that contains a column for age and a column for the insurance charge. We would like to understand the relationship that exists between these two columns:
import pandas as pd
import matplotlib.pyplot as plt 
import seaborn as sns

# Load data
ins_df = pd.read_csv('insurance.csv')
	

In Matplotlib, the scatter() method would be most appropriate. This can be achieved as follows:
# Create a new figure for the scatter plot
plt.figure()


# Plot a scatter plot
plt.scatter(ins_df['age'], ins_df['charges'])
plt.xlabel("age")
plt.ylabel("charges")
plt.show()
plt.close()
	And it would look something like this:
  

You can get a general sense of this data, but it may take time to understand the overall trend. In Seaborn, there is a lineplot() method that automatically plots averages and standard deviations for ease of reading. To do this, see the following:
# Plot a line plot
plt.figure()
sns.lineplot(x='age', y='charges', data=ins_df)
plt.show()


# Save as a PNG image file
plt.savefig('sns_lineplot.png') 
plt.close()
	And it will end up with something that looks like this:
  

This makes it a lot easier to see the overall trend that exists in the data: the higher your age, the larger your insurance charges.
Instructions
First, read and run the example files provided. Feel free to write and run your own example code before doing the practical task to become more comfortable with the concepts covered in this task.
Practical task
Follow these steps:
* Open the Jupyter notebook named data_viz_task.ipynb.
* Generate the following graphs from the Cars93.csv dataset. Then, answer the accompanying questions in the markdown cells in the notebook:
   * A box plot for the revs per mile for the Audi, Hyundai, Suzuki, and Toyota car manufacturers. Which of these manufacturers has the car with the highest revs per mile?
   * A histogram of MPG in the city. On the same axis, show a histogram of MPG on the highway. Is it generally more fuel-efficient to drive in the city or on the highway?
   * A line plot showing the relationship between the “wheelbase” and “turning circle”. What is this relationship? What happens when the wheelbase gets larger?
   * A bar plot showing the mean horsepower for each car type (small, midsize, etc.). Does a larger car mean more horsepower?
After completing your work, make sure to place all submission files inside the task folder. Once everything is in place, click "Request review" on your dashboard.
	  


HyperionDev strives to provide internationally excellent course content that helps you achieve your learning outcomes. 

Think that the content of this task, or this course as a whole, can be improved, or do you think we’ve done a good job?


Click here to share your thoughts anonymously.

  

REFERENCES
Hunter, J. D. (2007). Matplotlib: A 2D graphics environment. Computing in Science & Engineering, 9(3), pp. 90–95.