[
  {
    "text": "User-Deﬁned",
    "metadata": {
      "section": "With"
    }
  },
  {
    "text": "lesson w ill focus on teaching you how to create your ow n functions.",
    "metadata": {
      "section": "This"
    }
  },
  {
    "text": "are the backbone of code, em pow ering you to tackle com plex tasks w ith elegance and precision.",
    "metadata": {
      "section": "Functions"
    }
  },
  {
    "text": "w ill also learn how functions can be used to com pute certain values using list elem ents and text ﬁle contents. Deﬁning a function A function can be deﬁned as follow s: #Thisfunction,add_one,takesasingleparameterxandreturnsthevalueofxincrementedby1 defadd_one(x):y=x+1returny",
    "metadata": {
      "section": "You"
    }
  },
  {
    "text": "function that has been created in the exam ple above is deﬁned by the keyw orddef and is nam edadd_one . It takes the param eterx as input. A parameter is a variable that is declared in a function deﬁnition.",
    "metadata": {
      "section": "The"
    }
  },
  {
    "text": "store the data needed to perform the logic that the function speciﬁes. are ﬁlled w hen data is passed to the function as an argum ent w hen the function is called (w hich you w ill learn about soon).",
    "metadata": {
      "section": "Param eters"
    }
  },
  {
    "text": "code indented underdefadd_one is the logic of the function. It deﬁnes w hat happens w hen the function is called.",
    "metadata": {
      "section": "The"
    }
  },
  {
    "text": "can pretty m uch do anything you w ant in a function.",
    "metadata": {
      "section": "You"
    }
  },
  {
    "text": "exam ple, you can create new data structures, use conditionals, etc.",
    "metadata": {
      "section": "For"
    }
  },
  {
    "text": "function in the exam ple above com putes a new variable,y , w hich is the value stored in variablex w ith1 added. It w ill thenreturn the valuey . general syntax of a function in",
    "metadata": {
      "section": "The"
    }
  },
  {
    "text": "is as follow s: deffunctionName(parameters):statementsreturn(expression)",
    "metadata": {
      "section": "Python"
    }
  },
  {
    "text": "def and return keywords",
    "metadata": {
      "section": "The"
    }
  },
  {
    "text": "thedef keyw ord.",
    "metadata": {
      "section": "N ote"
    }
  },
  {
    "text": "know s you're deﬁning a function w hen you start a line w ith this keyw ord.",
    "metadata": {
      "section": "Python"
    }
  },
  {
    "text": "the keyw ord,def , put a function nam e, its input param eters, and then a colon, w ith the logic of the function indented underneath. 2 © 2024 H yperionD ev.",
    "metadata": {
      "section": "After"
    }
  },
  {
    "text": "rights reserved.",
    "metadata": {
      "section": "All"
    }
  },
  {
    "text": "value after thereturn statem ent, resulting fromexpression , w ill be returned/passed back to w hatever code ‘called’ the function, at w hich point the execution of that block of code stops.",
    "metadata": {
      "section": "The"
    }
  },
  {
    "text": "that thereturn keyw ord doesn’t have to be included in a function.",
    "metadata": {
      "section": "N ote"
    }
  },
  {
    "text": "can w rite functions that return (send back) a value to the calling function as in the syntax exam ple above, or you can w rite functions that just do som ething (such as calculate or print) and don’t return anything.",
    "metadata": {
      "section": "You"
    }
  },
  {
    "text": "w e go into this any further, let’s look at w hat it m eans to call a function.",
    "metadata": {
      "section": "Before"
    }
  },
  {
    "text": "versus return Let’s look at the differences betw eenprint andreturn : ●print outputs data to the console. It's useful for debugging and displaying inform ation to the user. defgreet(name):#Thisfunctiontakesa'name',andprintsapersonalisedgreeting.print(f\"Hello,{name}!\") greet(\"Alice\")#Thiswillprint\"Hello,Alice!\"totheconsole. ●return sends data back to the caller of the function. It's used w hen you need to reuse the result of a function elsew here in your program. defadd(a,b):#Thisfunctiontakestwoarguments,aandb,andreturnstheirsum.returna+bresult=add(3,4) print(result)#Printthevalueof'result'(whichis7)totheconsole. In sum m ary,print is for displaying inform ation, w hilereturn is for passing data from a function to the rest of the program.",
    "metadata": {
      "section": "Print"
    }
  },
  {
    "text": "returned value is stored in a variable, w hich can then be used elsew here in the program or printed to the console.",
    "metadata": {
      "section": "The"
    }
  },
  {
    "text": "a function It is good practice to deﬁne all your functions at the top of your code ﬁle and ‘call’ them as needed later in the code ﬁle.",
    "metadata": {
      "section": "Calling"
    }
  },
  {
    "text": "can call a function by using the function’s nam e, follow ed by the values you w ould like to pass to the param eters in parentheses.",
    "metadata": {
      "section": "You"
    }
  },
  {
    "text": "values that you pass to the function are referred to as arguments. 3 © 2024 H yperionD ev.",
    "metadata": {
      "section": "The"
    }
  },
  {
    "text": "rights reserved.",
    "metadata": {
      "section": "All"
    }
  },
  {
    "text": "is an exam ple of calling ouradd_one function, and assigning the value returned from it to a variable: defadd_one(x):#Functiontoadd1toxy=x+1returny #Calladd_onewith5andstoretheresultsinavariableresult_num=add_one(5) #Outputtheresults,whichis6print(result_num)",
    "metadata": {
      "section": "H ere"
    }
  },
  {
    "text": "can deﬁne a function, but it w ill not run unless called som ew here in the code.",
    "metadata": {
      "section": "You"
    }
  },
  {
    "text": "exam ple, although w e have deﬁned the functionadd_one above, the code indented underneath w ill never be executed unless another line that callsadd_one w ith the com m andadd_one(some_variable) is added som ew here in the m ain body of your code.",
    "metadata": {
      "section": "For"
    }
  },
  {
    "text": "with function parameters In the function deﬁnition, the parameters are betw een the parentheses after the function nam e.",
    "metadata": {
      "section": "W orking"
    }
  },
  {
    "text": "can have m ore than one of these variables or param eters – sim ply separate them by com m as.",
    "metadata": {
      "section": "You"
    }
  },
  {
    "text": "you call a function, you place the value you w ould like to pass to the function as an argument in parentheses after the function nam e, e.g. result_num=add_one(5) (If w e didn’t do som ething w ith the returned value, such as set up a variable to hold it, or a print statem ent to output it, w hat do you think w ould happen?) N ow, let’s look at another exam ple show ing som ething very sim ilar to our ﬁrst function-calling exam ple, but w ith the code w ritten to be shorter and m ore efﬁcient (m ore succinct code can be m ore challenging for beginners to understand, but it’s w orth noting w hen code can be w ritten m ore efﬁciently, as this is w hat program m ers ultim ately aspire to achieve). In the exam ple below, theadd_one function is called again. H ere, w e pass the value10 as an argument to the function. As w e created a param eter calledx w hen w e deﬁned the functionadd_one , passing the argum ent10 to the function w ill result in the param eterx being assigned the value10 . 4 © 2024 H yperionD ev.",
    "metadata": {
      "section": "W hen"
    }
  },
  {
    "text": "rights reserved. defadd_one(x):#Functiontoadd1toxy=x+1returny num=10 #Callthefunctionwithintheprintstatementandoutputtheresultprint(\"10plus1isequalto:\"+str(add_one(num))+\".\") #Alternativelynum_plus_one=add_one(10) #Usethestoredresultintheprintstatementprint(\"10plus1isequalto:\"+str(num_plus_one)+\".\")",
    "metadata": {
      "section": "All"
    }
  },
  {
    "text": "of a call to the function – e.g.add_one(num) – as a placeholder for som e com putation.",
    "metadata": {
      "section": "Think"
    }
  },
  {
    "text": "function w ill run its code and return its result in that place. above exam ples have all show n functions that return a value. Let’s look at an exam ple that also prints out the result of adding one to an argum ent that w as passed in to it, but does not return anything. defadd_one(x):#Functiontoadd1toxy=x+1#Printtheresultsimmediatelyprint(y) #Callthefunctionwith3astheargument,whichprints4add_one(3) In the above exam ple,add_one does not return anything at all, i.e. if you tried to w riteresult=add_one(3), nothing w ould be assigned toresult . If you then tried to print outresult , the output from that print statem ent w ould sim ply say“None” . Go ahead, try doing this and running it to see for yourself.",
    "metadata": {
      "section": "The"
    }
  },
  {
    "text": "from sequential to procedural programming A m ajor sw itch happens in how you’re able to program w hen you learn about functions.",
    "metadata": {
      "section": "Transitioning"
    }
  },
  {
    "text": "now, all your program s have been sequential.",
    "metadata": {
      "section": "Before"
    }
  },
  {
    "text": "m eans that code is alw ays executed in the sam e order in w hich w e read it; from the top of the ﬁle to the bottom. 5 © 2024 H yperionD ev.",
    "metadata": {
      "section": "This"
    }
  },
  {
    "text": "rights reserved.",
    "metadata": {
      "section": "All"
    }
  },
  {
    "text": "functions, w e lose this.",
    "metadata": {
      "section": "W ith"
    }
  },
  {
    "text": "can deﬁne a function anyw here in your ﬁle, but it w ill not run unless it’s called som ew here.",
    "metadata": {
      "section": "You"
    }
  },
  {
    "text": "m eans that the statem ents in your code are no longer necessarily executed in the sam e order that they are w ritten. m ay sound unnecessarily confusing, but you w ill get used to it quite quickly, and the m any beneﬁts of functions outw eigh the slight inconvenience of needing to shift your thinking. Let’s consider som e of these beneﬁts.",
    "metadata": {
      "section": "This"
    }
  },
  {
    "text": "use functions?",
    "metadata": {
      "section": "W hy"
    }
  },
  {
    "text": "are m any beneﬁts to using functions: ●",
    "metadata": {
      "section": "There"
    }
  },
  {
    "text": "functions allow s you to have reusable code .",
    "metadata": {
      "section": "Creating"
    }
  },
  {
    "text": "are m any tasks that, as a program m er, you m ay need to code repeatedly.",
    "metadata": {
      "section": "There"
    }
  },
  {
    "text": "instance, say you w rote several lines of code that, given a ﬁlenam e, can open the ﬁle, read its contents, and print out its contents to the screen. It m ay be useful to 'save' that code som ew here so you can easily reuse it. A program m er can deﬁne a function nam edread_file , that w ould encode this logic.",
    "metadata": {
      "section": "For"
    }
  },
  {
    "text": "w ay, the next tim e they needed to read the contents of a ﬁle, they w ould sim ply call the functionread_file .",
    "metadata": {
      "section": "That"
    }
  },
  {
    "text": "w ill return the result of that function, w hich in this case w ill result in the output being printed on the screen. ●",
    "metadata": {
      "section": "This"
    }
  },
  {
    "text": "also m ake error-checking and validating your code easier.",
    "metadata": {
      "section": "Functions"
    }
  },
  {
    "text": "m odule can be tested separately, possibly by different developers. ●",
    "metadata": {
      "section": "Each"
    }
  },
  {
    "text": "divide your code into manageable chunks to m ake the code easier to understand and troubleshoot. ●",
    "metadata": {
      "section": "Functions"
    }
  },
  {
    "text": "program m ing is w here a different developer or team of developers can code each m odule (set of functions). program m ing enables more rapid application development.",
    "metadata": {
      "section": "M odular"
    }
  },
  {
    "text": "m eans that m any m odules can be developed sim ultaneously, increasing the speed at w hich team s can develop applications. Also, developers can reuse existing m odules in new applications, leading to m ore rapid softw are developm ent. ●",
    "metadata": {
      "section": "This"
    }
  },
  {
    "text": "functions can also m ake it easier to maintain applications. If a part of a system needs to be updated, the w hole program doesn’t need to be m odiﬁed. Instead, just the necessary function or functions can be changed.",
    "metadata": {
      "section": "Using"
    }
  },
  {
    "text": "is a program ’s ability to ﬁnd and use variables in a program.",
    "metadata": {
      "section": "Scope"
    }
  },
  {
    "text": "rule of thum b is that a function is covered in one-w ay glass: it can see out, but no one can see in.",
    "metadata": {
      "section": "The"
    }
  },
  {
    "text": "m eans that a function can call variables that are outside the function, but the rest of the code cannot call variables that are deﬁned inside the function. 6 © 2024 H yperionD ev.",
    "metadata": {
      "section": "This"
    }
  },
  {
    "text": "rights reserved. Let’s look at an exam ple: #Accessestheinternalvariable'total'andalsotheexternalvariable'description'defadding(a,b):total=a+breturn(description+str(total))x=2y=3description=\"Total:\" #Callstheaddingfunctionwithxandyasargumentssum=adding(x,y)#Printstheresultsprint(sum)",
    "metadata": {
      "section": "All"
    }
  },
  {
    "text": "In the code exam ple above, the function m akes use of thedescription variable from inside the function, despite the fact that this variable is not part of the function, but is outside it.",
    "metadata": {
      "section": "Total:"
    }
  },
  {
    "text": "show s that the function can look outside and use variables from outside the function.",
    "metadata": {
      "section": "This"
    }
  },
  {
    "text": "let’s see w hat happens if w e putdescription inside the function: #Internalvariable'description',notaccessibleoutsidethefunctiondefadding(a,b):total=a+bdescription=\"Total:\"return(str(total)) x=2y=3 #Calladdingfunctionwithxandysum=adding(x,y) #Attempttoprinttheresults(thiswillcauseanerroras'descriptionisnotdefinedoutsidethefunction'print(description+sum)",
    "metadata": {
      "section": "N ow"
    }
  },
  {
    "text": "7 © 2024 H yperionD ev.",
    "metadata": {
      "section": "NameError:"
    }
  },
  {
    "text": "rights reserved.",
    "metadata": {
      "section": "All"
    }
  },
  {
    "text": "how the program com plains that it can’t ﬁnd thedescription variable? That’s because of the ‘one-w ay glass’: the rest of the code can’t see into the function and so doesn’t know that adescription variable exists.",
    "metadata": {
      "section": "See"
    }
  },
  {
    "text": "values",
    "metadata": {
      "section": "Default"
    }
  },
  {
    "text": "creating your ow n functions, it is possible to create default argum ents. Let’s look at the exam ple below: #Functiontomultiplytwonumbers,defaultvalueof5fornum2defmultiply(num1,num2=5):total=num1*num2print(f\"{num1}*{num2}={total}\") #Usesdefaultnum2,Output:6*5=30times_5=multiply(6)",
    "metadata": {
      "section": "W hen"
    }
  },
  {
    "text": "w e have a function that m ultiplies tw o num bers and prints a string w ith the total.",
    "metadata": {
      "section": "H ere"
    }
  },
  {
    "text": "default value ofnum2 is ﬁve, so w hen w e call the function and give the argum ent six, that m eans thatnum1=6 – w e don’t need to give an argum ent fornum2 ; it w ill default to ﬁve. w hen w e print outtimes_5, the output w ill be: 6*5=30",
    "metadata": {
      "section": "The"
    }
  },
  {
    "text": "w ould happen if w e took the default value for num 2 out and called the function w ith only one param eter? Let’s have a look: #Setsadefaultvalueoffivefornum2defmultiply(num1,num2):total=num1*num2print(f\"{num1}*{num2}={total}\") times_5=multiply(6)",
    "metadata": {
      "section": "W hat"
    }
  },
  {
    "text": "As you can see, an error w ill be generated explaining that one input argum ent, in this casenum2 , is m issing and the function cannot run w ithout it.",
    "metadata": {
      "section": "TypeError:"
    }
  },
  {
    "text": "if you w ant a function to have a default value, but you som etim es w ant to override that default value and use a different value asnum2 ? It is possible to change the 8 © 2024 H yperionD ev.",
    "metadata": {
      "section": "W hat"
    }
  },
  {
    "text": "rights reserved. value ofnum2 . At the tim e you call the function, sim ply by providing a second argum ent value.",
    "metadata": {
      "section": "All"
    }
  },
  {
    "text": "a look at the exam ple below: defmultiply(num1,num2=5):total=num1*num2print(f\"{num1}*{num2}={total}\") #Overridesfault;output:6*7=42times_7=multiply(6,7) H ere, even thoughnum2 still has a default value of ﬁve, w e have overw ritten that to give it a value of seven. N ow, the output w ill be: 6*7=42",
    "metadata": {
      "section": "H ave"
    }
  },
  {
    "text": "could also call the function using keyw ord argum ents, so the order in w hich w e w rite the argum ents doesn't m atter.",
    "metadata": {
      "section": "W e"
    }
  },
  {
    "text": "instance, using the above function: times_9=multiply(num2=6,num1=9)",
    "metadata": {
      "section": "For"
    }
  },
  {
    "text": "9*6=54 Let’s look at a sum m ary of all the variations in how w e can call a function w ith default param eters: #Bothparametershavedefaultargumentsdefmultiply(num1=6,num2=5):total=num1*num2print(f\"{num1}*{num2}={total}\") #Ifyouprovidenoargumentsbothdefaultsareusedmultiply_test=multiply()#Ifyouprovideoneargumentitgoesintothefirstvariableandoverwritesthesixmultiply_test=multiply(1)#Iftwoargumentsareprovidedbothdefaultsareoverwrittenmultiply_test=multiply(2,7)#Ifyouspecifytheparameternames,thisenablesyoutoprovidevaluesinadifferentordermultiply_test=multiply(num2=8,num1=7) 9 © 2024 H yperionD ev.",
    "metadata": {
      "section": "Output:"
    }
  },
  {
    "text": "rights reserved. #Ifyoudidthisanddidn'tspecifythenameoftheotherparameter,anerrorwouldbegeneratedmultiply_test=multiply(num2=8,7)",
    "metadata": {
      "section": "All"
    }
  },
  {
    "text": "6*5=301*5=52*7=147*8=56SyntaxError:positionalargumentfollowskeywordargument",
    "metadata": {
      "section": "Output:"
    }
  },
  {
    "text": "that you know how to w rite functions let’s explore how you docum ent w hat the function does.",
    "metadata": {
      "section": "N ow"
    }
  },
  {
    "text": "m ay seem obvious for these sim ple exam ples but as your functions becom e m ore com plex you need to ensure som eone else (including your future self) can easily understand the purpose of a function.",
    "metadata": {
      "section": "This"
    }
  },
  {
    "text": "are special com m ents that provide docum entation for functions, classes, and m odules.",
    "metadata": {
      "section": "Docstrings"
    }
  },
  {
    "text": "are enclosed in triple quotes (\"\"\" ) and appear as the ﬁrst statem ent w ithin the deﬁnition.",
    "metadata": {
      "section": "They"
    }
  },
  {
    "text": "serve as a valuable resource for understanding the purpose, param eters, and return values of code elem ents.",
    "metadata": {
      "section": "D ocstrings"
    }
  },
  {
    "text": "are essential for m aintaining code readability and m aking it easier for others to use and understand your code. defsquare(length):\"\"\"Calculatetheareaofasquare.",
    "metadata": {
      "section": "They"
    }
  },
  {
    "text": "returnlength*length 10 © 2024 H yperionD ev.",
    "metadata": {
      "section": "Returns:"
    }
  },
  {
    "text": "rights reserved.",
    "metadata": {
      "section": "All"
    }
  },
  {
    "text": "and run the accom panying example ﬁles provided before doing the task in order to becom e m ore com fortable w ith the concepts covered in this task.",
    "metadata": {
      "section": "Read"
    }
  },
  {
    "text": "note",
    "metadata": {
      "section": "Take"
    }
  },
  {
    "text": "task(s) below is/are auto-graded . An auto-graded task still counts tow ards your progression and graduation.",
    "metadata": {
      "section": "The"
    }
  },
  {
    "text": "it your best attem pt and subm it it w hen you are ready.",
    "metadata": {
      "section": "Give"
    }
  },
  {
    "text": "you select “Request Review ”, the task is autom atically com plete, you do not need to w ait for it to be review ed by a m entor.",
    "metadata": {
      "section": "W hen"
    }
  },
  {
    "text": "w ill then receive an em ail w ith a link to a m odel answ er, as w ell as an overview of the approach taken to reach this answ er.",
    "metadata": {
      "section": "You"
    }
  },
  {
    "text": "som e tim e to review and com pare your w ork against the m odel answ er.",
    "metadata": {
      "section": "Take"
    }
  },
  {
    "text": "exercise w ill help solidify your understanding and provide an opportunity for reﬂection on how to apply these concepts in future projects. In the sam e em ail, you w ill also receive a link to a survey, w hich you can use to self-assess your subm ission.",
    "metadata": {
      "section": "This"
    }
  },
  {
    "text": "you’ve done that, feel free to progress to the next task. 11 © 2024 H yperionD ev.",
    "metadata": {
      "section": "O nce"
    }
  },
  {
    "text": "rights reserved. Auto-graded task 1 1.",
    "metadata": {
      "section": "All"
    }
  },
  {
    "text": "a",
    "metadata": {
      "section": "Create"
    }
  },
  {
    "text": "ﬁle called holiday.py. 2.",
    "metadata": {
      "section": "Python"
    }
  },
  {
    "text": "task w ill be to calculate a user’s total holiday cost, w hich includes the plane cost, hotel cost, and car rental cost. 3. First, get the follow ing user inputs: ○city_flight :",
    "metadata": {
      "section": "Your"
    }
  },
  {
    "text": "city they w ill be ﬂying to (you can create som e options for them. Rem em ber, each city w ill have different ﬂight costs). ○num_nights : num ber of nights they w ill be staying at a hotel. ○rental_days : num ber of days for w hich they w ill be hiring a car. 4. N ext, create the follow ing four functions: ○hotel_cost() :",
    "metadata": {
      "section": "The"
    }
  },
  {
    "text": "function w ill takenum_nights as an argum ent and return a total cost for the hotel stay (you can choose the price per night charged at the hotel). ○plane_cost() : function w ill takecity_flight as an argum ent and return a cost for the ﬂight.",
    "metadata": {
      "section": "This"
    }
  },
  {
    "text": "use if/else statem ents in the function to retrieve a price based on the chosen city. ○car_rental() :",
    "metadata": {
      "section": "H int:"
    }
  },
  {
    "text": "function w ill takerental_days as an argum ent and return the total cost of the car rental (you can choose the daily rental cost). ○holiday_cost() : function takes three argum ents:num_nights,city_flight , andrental_days .",
    "metadata": {
      "section": "This"
    }
  },
  {
    "text": "these three argum ents, call thehotel_cost(),plane_cost(), andcar_rental() functions w ith their respective argum ents, and ﬁnally return the total cost for the holiday. 5.",
    "metadata": {
      "section": "Using"
    }
  },
  {
    "text": "out all the details about the holiday in a w ay that is easy to read.",
    "metadata": {
      "section": "Print"
    }
  },
  {
    "text": "running your program w ith different com binations of input to show its com patibility w ith different options. Be sure to place ﬁles for subm ission inside your task folder and click \"",
    "metadata": {
      "section": "Try"
    }
  },
  {
    "text": "review \" on your dashboard. 12 © 2024 H yperionD ev.",
    "metadata": {
      "section": "Request"
    }
  },
  {
    "text": "rights reserved.",
    "metadata": {
      "section": "All"
    }
  },
  {
    "text": "your thoughts",
    "metadata": {
      "section": "Share"
    }
  },
  {
    "text": "strives to provide internationally excellent course content that helps you achieve your learning outcom es.",
    "metadata": {
      "section": "H yperionD ev"
    }
  },
  {
    "text": "you think w e’ve done a good job or do you think the content of this task, or this course as a w hole, can be im proved?",
    "metadata": {
      "section": "D o"
    }
  },
  {
    "text": "your thoughts anonym ously using this form . 13 © 2024 H yperionD ev.",
    "metadata": {
      "section": "Share"
    }
  },
  {
    "text": "rights reserved.",
    "metadata": {
      "section": "All"
    }
  }
]